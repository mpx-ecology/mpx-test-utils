(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{472:function(t,s,a){"use strict";a.r(s);var n=a(65),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"起步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起步"}},[t._v("#")]),t._v(" 起步")]),t._v(" "),a("h2",{attrs:{id:"搭建项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建项目"}},[t._v("#")]),t._v(" 搭建项目")]),t._v(" "),a("p",[t._v("快速尝鲜单元测试的办法就是克隆我们的 demo 仓库再加上基本的设置和依赖安装。")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/Blackgan3/mpx-unit-test-demo\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" mpx-unit-test-demo\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n")])])]),a("p",[t._v("或者如果你是老的项目，也可以按照我们"),a("a",{attrs:{href:""}},[t._v("安装与配置章节")]),t._v("对项目进行相关配置来支持单测的书写")]),t._v(" "),a("h2",{attrs:{id:"工具文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具文档"}},[t._v("#")]),t._v(" 工具文档")]),t._v(" "),a("p",[t._v('"工欲善其事，必先利其器"，书写小程序单元测试之前，我们需要熟读和单元测试相关API的各种使用文档')]),t._v(" "),a("p",[t._v("首先我们需要熟悉的是 Jest 单测框架的相关 API 的使用，此外就是 expect 断言的相关语法，这些已经是\n现成的官方文档，我们就不进行一一介绍了，在开始写单测前请先阅读 "),a("a",{attrs:{href:""}},[t._v("Jest")]),t._v(" 文档")]),t._v(" "),a("p",[t._v("此外如何渲染组件以及组件封装实例的相关操作 API 我们将在本文档的 "),a("a",{attrs:{href:""}},[t._v("API 章节")]),t._v("进行介绍，在写单测前，也可先去对应的 API 章节进行\n文档阅读。")]),t._v(" "),a("h2",{attrs:{id:"渲染挂载组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#渲染挂载组件"}},[t._v("#")]),t._v(" 渲染挂载组件")]),t._v(" "),a("p",[t._v("Mpx Test Utils 对微信小程序自定义组件测试工具集 miniprogram-simulate 进行了一层封装，补充了许多便于单测书写的工具方法以及\n扩展了loadMpx等方法支持Mpx组件的渲染和挂载")]),t._v(" "),a("p",[t._v("我们对小程序组件进行隔离挂载，然后模拟必要的输入 (props、注入和用户事件) 和对输出 (渲染结果、触发的自定义事件) 的断言来测试 Mpx 小程序组件。")]),t._v(" "),a("p",[t._v("被挂载的组件会返回到一个"),a("RouterLink",{attrs:{to:"/api/wrapper/"}},[t._v("封装实例")]),t._v("内，该实例会暴露很多封装、遍历和查询其内部的 Mpx 子组件实例的便捷的方法。")],1),t._v(" "),a("p",[t._v("你可以通过 "),a("code",[t._v("createComp")]),t._v("或者 "),a("code",[t._v("createCompAndAttach")]),t._v(" 方法来创建包裹器。让我们创建一个名叫 "),a("code",[t._v("test.js")]),t._v(" 的文件：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// test.js")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从测试实用工具集中导入 `createCompAndAttach` 方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 同时声明出要测试组件的路径")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createCompAndAttach "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@mpx/test-utils'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compPath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/somePack/compA.mpx'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 渲染并挂载组件，现在你便得到了这个组件实例包裹对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" comp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCompAndAttach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 你可以通过 `comp.instance` 访问实际的 Mpx 组件实例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("instance\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以通过 `comp.dom` 访问实际的 Mpx 组件的 dom 对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" domHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML\n")])])]),a("h2",{attrs:{id:"测试组件渲染出来的-html"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#测试组件渲染出来的-html"}},[t._v("#")]),t._v(" 测试组件渲染出来的 HTML")]),t._v(" "),a("p",[t._v("现在我们已经有了Mpx组件的包裹器，这里我们首先可以做的就是对组件的HTML进行断言预期。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createCompAndAttach "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@mpx/test-utils'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compPath "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'src/somePack/compA.mpx'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("describe")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'CompA'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 渲染并挂载组件，现在你便得到了这个组件实例包裹对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" comp "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createCompAndAttach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compPath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" domHTML "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" comp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("innerHTML\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dom render swiper comp correct'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domHTML"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toContain")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<swiper>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 也便于检查已存在的元素")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("it")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'has a icon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("expect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domHtml"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("includes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<mpx-icon'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toBeFalsy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("现在运行 "),a("code",[t._v("npm test")]),t._v(" 进行测试。你应该看得到测试通过。")]),t._v(" "),a("p",[t._v("至此，我们进行了工具仓库相关文档的阅读，完成了组件的渲染挂载，并拿到了组件包裹器。")])])}),[],!1,null,null,null);s.default=e.exports}}]);